{"version":3,"file":"static/js/432.c1ea0931.chunk.js","mappings":"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","sources":["store/gameStore.ts","components/3d/GrassPlatform.tsx","components/3d/objects/FenceComponent.tsx","components/3d/objects/CornerFenceComponent.tsx","components/3d/objects/GateComponent.tsx","components/3d/objects/BuildingObjects.tsx","components/3d/PlacementSystem.tsx","components/3d/Scene3D.tsx"],"sourcesContent":["import { create } from 'zustand';\n\ninterface PlacedObject {\n  id: string;\n  type: string;\n  position: [number, number, number];\n  rotation: [number, number, number];\n  color?: string;\n}\n\ninterface GameState {\n  // Game state\n  placedObjects: PlacedObject[];\n  currentDragItem: string | null;\n  gamePhase: 'building' | 'ready' | 'destruction';\n  \n  // Statistics\n  score: number;\n  blocksPlaced: number;\n  timeElapsed: number;\n  \n  // Actions\n  addObject: (object: PlacedObject) => void;\n  removeObject: (id: string) => void;\n  setCurrentDragItem: (item: string | null) => void;\n  setGamePhase: (phase: 'building' | 'ready' | 'destruction') => void;\n  incrementScore: (points: number) => void;\n  resetGame: () => void;\n  updateTimeElapsed: (time: number) => void;\n}\n\nconst initialState = {\n  placedObjects: [],\n  currentDragItem: null,\n  gamePhase: 'building' as const,\n  score: 0,\n  blocksPlaced: 0,\n  timeElapsed: 0,\n};\n\nexport const useGameStore = create<GameState>((set) => ({\n  ...initialState,\n  \n  addObject: (object) =>\n    set((state) => ({\n      placedObjects: [...state.placedObjects, object],\n      blocksPlaced: state.blocksPlaced + 1,\n    })),\n  \n  removeObject: (id) =>\n    set((state) => ({\n      placedObjects: state.placedObjects.filter((obj) => obj.id !== id),\n      blocksPlaced: Math.max(0, state.blocksPlaced - 1),\n    })),\n  \n  setCurrentDragItem: (item) =>\n    set({ currentDragItem: item }),\n  \n  setGamePhase: (phase) =>\n    set({ gamePhase: phase }),\n  \n  incrementScore: (points) =>\n    set((state) => ({ score: state.score + points })),\n  \n  resetGame: () =>\n    set(initialState),\n  \n  updateTimeElapsed: (time) =>\n    set({ timeElapsed: time }),\n}));","import React from 'react';\nimport { Grid } from '@react-three/drei';\n\ninterface GrassPlatformProps {\n  size?: number;\n}\n\nconst GrassPlatform: React.FC<GrassPlatformProps> = ({ size = 8 }) => {\n  return (\n    <group>\n      {/* Grass platform - bright green */}\n      <mesh \n        rotation={[-Math.PI / 2, 0, 0]} \n        position={[0, 0.01, 0]}\n        receiveShadow\n      >\n        <planeGeometry args={[size, size]} />\n        <meshStandardMaterial \n          color=\"#1e5e2e\"\n          roughness={0.95}\n          metalness={0}\n        />\n      </mesh>\n      \n      {/* Grid overlay - raised slightly to avoid z-fighting */}\n      <Grid\n        args={[size, size]}\n        cellSize={1}\n        cellThickness={0.8}\n        cellColor=\"white\"\n        sectionSize={4}\n        sectionThickness={1.5}\n        sectionColor=\"white\"\n        fadeDistance={30}\n        fadeStrength={1}\n        followCamera={false}\n        infiniteGrid={false}\n        position={[0, 0.05, 0]}\n        rotation={[-Math.PI / 2, 0, 0]}\n      />\n      \n      {/* Platform base - darker brown */}\n      <mesh position={[0, -0.3, 0]} receiveShadow castShadow>\n        <boxGeometry args={[size + 0.4, 0.6, size + 0.4]} />\n        <meshStandardMaterial color=\"#654321\" roughness={1} metalness={0} />\n      </mesh>\n    </group>\n  );\n};\n\nexport default GrassPlatform;","import React, { useRef, useState, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { Box } from '@react-three/drei';\n\ninterface FenceComponentProps {\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n  isConnected?: boolean;\n  onPlace?: () => void;\n}\n\nconst FenceComponent: React.FC<FenceComponentProps> = ({ \n  position, \n  rotation = 0, \n  isPreview = false,\n  isConnected = false,\n  onPlace \n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const [hovered, setHovered] = useState(false);\n  const glowRef = useRef<THREE.Mesh>(null);\n\n  // Animate glow effect when connected\n  useFrame((state) => {\n    if (glowRef.current && isConnected) {\n      const material = glowRef.current.material as THREE.MeshBasicMaterial;\n      if (material) {\n        material.opacity = 0.3 + Math.sin(state.clock.elapsedTime * 3) * 0.2;\n      }\n    }\n  });\n\n  // Create picket fence geometry\n  const pickets = useMemo(() => {\n    const picketPositions: number[] = [];\n    const picketCount = 5;\n    const spacing = 0.2;\n    const startX = -(picketCount - 1) * spacing / 2;\n    \n    for (let i = 0; i < picketCount; i++) {\n      picketPositions.push(startX + i * spacing);\n    }\n    return picketPositions;\n  }, []);\n\n  return (\n    <group \n      ref={groupRef} \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n      onClick={onPlace}\n    >\n      {/* Fence base/rail - adjusted length to fit within grid */}\n      <Box \n        args={[0.8, 0.1, 0.05]} \n        position={[0, 0.3, 0]}\n        castShadow\n        receiveShadow\n      >\n        <meshStandardMaterial \n          color={isPreview ? \"#ffffff\" : \"#f5f5f5\"}\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Box>\n      \n      {/* Top rail - adjusted length */}\n      <Box \n        args={[0.8, 0.05, 0.05]} \n        position={[0, 0.6, 0]}\n        castShadow\n      >\n        <meshStandardMaterial \n          color={isPreview ? \"#ffffff\" : \"#f5f5f5\"}\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Box>\n      \n      {/* End posts for better connection */}\n      <Box \n        args={[0.05, 0.65, 0.05]} \n        position={[-0.4, 0.325, 0]}\n        castShadow\n      >\n        <meshStandardMaterial color={isPreview ? \"#ffffff\" : \"#e0e0e0\"} opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n      <Box \n        args={[0.05, 0.65, 0.05]} \n        position={[0.4, 0.325, 0]}\n        castShadow\n      >\n        <meshStandardMaterial color={isPreview ? \"#ffffff\" : \"#e0e0e0\"} opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n\n      {/* Pickets */}\n      {pickets.map((x, i) => (\n        <Box \n          key={i}\n          args={[0.08, 0.5, 0.03]} \n          position={[x, 0.35, 0]}\n          castShadow\n          receiveShadow\n        >\n          <meshStandardMaterial \n            color={isPreview ? \"#ffffff\" : \"#ffffff\"}\n            opacity={isPreview ? 0.7 : 1}\n            transparent={isPreview}\n          />\n        </Box>\n      ))}\n\n      {/* Connection glow effect */}\n      {isConnected && (\n        <mesh ref={glowRef} position={[0, 0.35, 0]}>\n          <boxGeometry args={[1.1, 0.7, 0.1]} />\n          <meshBasicMaterial \n            color=\"#00ff88\"\n            transparent\n            opacity={0.3}\n            side={THREE.DoubleSide}\n          />\n        </mesh>\n      )}\n\n      {/* Hover highlight */}\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.35, 0]}>\n          <boxGeometry args={[1.2, 0.8, 0.2]} />\n          <meshBasicMaterial \n            color=\"#ffff00\"\n            transparent\n            opacity={0.2}\n            side={THREE.DoubleSide}\n          />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\nexport default FenceComponent;","import React, { useRef, useState } from 'react';\nimport { Box } from '@react-three/drei';\nimport * as THREE from 'three';\n\ninterface CornerFenceComponentProps {\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n  onPlace?: () => void;\n}\n\nconst CornerFenceComponent: React.FC<CornerFenceComponentProps> = ({ \n  position, \n  rotation = 0, \n  isPreview = false,\n  onPlace \n}) => {\n  const [hovered, setHovered] = useState(false);\n\n  return (\n    <group \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n      onClick={onPlace}\n    >\n      {/* L-shaped fence - First segment */}\n      <group position={[-0.25, 0, 0]}>\n        <Box args={[0.5, 0.1, 0.05]} position={[0, 0.3, 0]} castShadow>\n          <meshStandardMaterial \n            color=\"#f5f5f5\"\n            opacity={isPreview ? 0.7 : 1}\n            transparent={isPreview}\n          />\n        </Box>\n        <Box args={[0.5, 0.05, 0.05]} position={[0, 0.6, 0]} castShadow>\n          <meshStandardMaterial color=\"#f5f5f5\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n        </Box>\n        {/* Pickets */}\n        {[-0.15, 0, 0.15].map((x, i) => (\n          <Box key={`v-${i}`} args={[0.08, 0.5, 0.03]} position={[x, 0.35, 0]} castShadow>\n            <meshStandardMaterial color=\"#ffffff\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n          </Box>\n        ))}\n      </group>\n\n      {/* L-shaped fence - Second segment (perpendicular) */}\n      <group position={[0, 0, -0.25]} rotation={[0, Math.PI / 2, 0]}>\n        <Box args={[0.5, 0.1, 0.05]} position={[0, 0.3, 0]} castShadow>\n          <meshStandardMaterial color=\"#f5f5f5\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n        </Box>\n        <Box args={[0.5, 0.05, 0.05]} position={[0, 0.6, 0]} castShadow>\n          <meshStandardMaterial color=\"#f5f5f5\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n        </Box>\n        {/* Pickets */}\n        {[-0.15, 0, 0.15].map((x, i) => (\n          <Box key={`h-${i}`} args={[0.08, 0.5, 0.03]} position={[x, 0.35, 0]} castShadow>\n            <meshStandardMaterial color=\"#ffffff\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n          </Box>\n        ))}\n      </group>\n\n      {/* Corner post */}\n      <Box args={[0.1, 0.65, 0.1]} position={[0, 0.325, 0]} castShadow>\n        <meshStandardMaterial color=\"#e0e0e0\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n\n      {/* Hover highlight */}\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.35, 0]}>\n          <boxGeometry args={[1, 0.8, 1]} />\n          <meshBasicMaterial color=\"#ffff00\" transparent opacity={0.2} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\nexport default CornerFenceComponent;","import React, { useState } from 'react';\nimport { Box } from '@react-three/drei';\n\ninterface GateComponentProps {\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n  onPlace?: () => void;\n}\n\nconst GateComponent: React.FC<GateComponentProps> = ({ \n  position, \n  rotation = 0, \n  isPreview = false,\n  onPlace \n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [hovered, setHovered] = useState(false);\n\n  const handleClick = () => {\n    if (!isPreview) {\n      setIsOpen(!isOpen);\n      onPlace?.();\n    }\n  };\n\n  return (\n    <group \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n      onClick={handleClick}\n    >\n      {/* Gate posts */}\n      <Box args={[0.1, 0.7, 0.1]} position={[-0.45, 0.35, 0]} castShadow>\n        <meshStandardMaterial color=\"#d0d0d0\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n      <Box args={[0.1, 0.7, 0.1]} position={[0.45, 0.35, 0]} castShadow>\n        <meshStandardMaterial color=\"#d0d0d0\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n\n      {/* Gate door - animates on open/close */}\n      <group \n        position={[-0.35, 0, 0]}\n        rotation={[0, isOpen ? Math.PI / 2 : 0, 0]}\n      >\n        <Box args={[0.7, 0.5, 0.05]} position={[0.35, 0.35, 0]} castShadow>\n          <meshStandardMaterial \n            color={isOpen ? \"#ffc080\" : \"#ffaa60\"}\n            opacity={isPreview ? 0.7 : 1} \n            transparent={isPreview} \n          />\n        </Box>\n        {/* Gate handle */}\n        <Box args={[0.05, 0.05, 0.08]} position={[0.6, 0.35, 0]} castShadow>\n          <meshStandardMaterial color=\"#666666\" />\n        </Box>\n      </group>\n\n      {/* Status indicator */}\n      <mesh position={[0, 0.8, 0]}>\n        <sphereGeometry args={[0.05, 8, 8]} />\n        <meshBasicMaterial color={isOpen ? \"#ff0000\" : \"#00ff00\"} />\n      </mesh>\n\n      {/* Hover highlight */}\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.35, 0]}>\n          <boxGeometry args={[1.2, 0.9, 0.3]} />\n          <meshBasicMaterial color=\"#ffff00\" transparent opacity={0.2} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\nexport default GateComponent;","import React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Box, Sphere, Cylinder, Cone } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// House Component - Barrier object\nexport const HouseComponent: React.FC<{\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n}> = ({ position, rotation = 0, isPreview = false }) => {\n  const [hovered, setHovered] = useState(false);\n  \n  return (\n    <group \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      {/* House base */}\n      <Box args={[1, 0.8, 1]} position={[0, 0.4, 0]} castShadow receiveShadow>\n        <meshStandardMaterial \n          color=\"#ff6b6b\"\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Box>\n      \n      {/* Roof */}\n      <Cone args={[0.8, 0.6, 4]} position={[0, 1, 0]} rotation={[0, Math.PI / 4, 0]} castShadow>\n        <meshStandardMaterial \n          color=\"#8b4513\"\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Cone>\n      \n      {/* Door */}\n      <Box args={[0.3, 0.5, 0.05]} position={[0, 0.25, 0.51]} castShadow>\n        <meshStandardMaterial color=\"#654321\" />\n      </Box>\n      \n      {/* Window */}\n      <Box args={[0.2, 0.2, 0.05]} position={[0.3, 0.5, 0.51]} castShadow>\n        <meshStandardMaterial color=\"#87ceeb\" />\n      </Box>\n\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.5, 0]}>\n          <boxGeometry args={[1.3, 1.5, 1.3]} />\n          <meshBasicMaterial color=\"#ffff00\" transparent opacity={0.2} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Tree Component - Natural barrier with swaying animation\nexport const TreeComponent: React.FC<{\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n}> = ({ position, rotation = 0, isPreview = false }) => {\n  const treeRef = useRef<THREE.Group>(null);\n  const [hovered, setHovered] = useState(false);\n  \n  useFrame((state) => {\n    if (treeRef.current && !isPreview) {\n      // Gentle swaying animation\n      treeRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 0.5) * 0.02;\n    }\n  });\n  \n  return (\n    <group \n      ref={treeRef}\n      position={position}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      {/* Tree trunk */}\n      <Cylinder args={[0.15, 0.2, 0.8]} position={[0, 0.4, 0]} castShadow>\n        <meshStandardMaterial \n          color=\"#8b4513\"\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Cylinder>\n      \n      {/* Tree canopy - semi-transparent */}\n      <Sphere args={[0.6, 8, 8]} position={[0, 1, 0]} castShadow receiveShadow>\n        <meshStandardMaterial \n          color=\"#228b22\"\n          opacity={isPreview ? 0.5 : 0.7}\n          transparent={true}\n        />\n      </Sphere>\n\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.7, 0]}>\n          <sphereGeometry args={[0.8, 8, 8]} />\n          <meshBasicMaterial color=\"#ffff00\" transparent opacity={0.2} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Hay Bale - Chicken attractor!\nexport const HayBaleComponent: React.FC<{\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n}> = ({ position, rotation = 0, isPreview = false }) => {\n  const [hovered, setHovered] = useState(false);\n  const baleRef = useRef<THREE.Mesh>(null);\n  \n  // Subtle pulse effect to make it appealing\n  useFrame((state) => {\n    if (baleRef.current && hovered && !isPreview) {\n      baleRef.current.scale.setScalar(1 + Math.sin(state.clock.elapsedTime * 3) * 0.02);\n    }\n  });\n  \n  return (\n    <group \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      <mesh ref={baleRef} castShadow receiveShadow>\n        <boxGeometry args={[0.8, 0.4, 0.5]} />\n        <meshStandardMaterial \n          color=\"#f4e04d\"\n          roughness={0.9}\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </mesh>\n      \n      {/* Straw texture lines */}\n      {[-0.2, 0, 0.2].map((z, i) => (\n        <Box key={i} args={[0.82, 0.02, 0.02]} position={[0, 0.1, z]}>\n          <meshStandardMaterial color=\"#d4c03d\" />\n        </Box>\n      ))}\n\n      {hovered && !isPreview && (\n        <mesh position={[0, 0, 0]}>\n          <boxGeometry args={[1, 0.6, 0.7]} />\n          <meshBasicMaterial color=\"#ffff00\" transparent opacity={0.3} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Water Trough - Another chicken attractor\nexport const WaterTroughComponent: React.FC<{\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n}> = ({ position, rotation = 0, isPreview = false }) => {\n  const [hovered, setHovered] = useState(false);\n  const waterRef = useRef<THREE.Mesh>(null);\n  \n  // Water ripple animation\n  useFrame((state) => {\n    if (waterRef.current && !isPreview) {\n      waterRef.current.position.y = 0.15 + Math.sin(state.clock.elapsedTime * 2) * 0.01;\n    }\n  });\n  \n  return (\n    <group \n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      {/* Trough container */}\n      <Box args={[1, 0.3, 0.4]} position={[0, 0.15, 0]} castShadow receiveShadow>\n        <meshStandardMaterial \n          color=\"#8b7355\"\n          opacity={isPreview ? 0.7 : 1}\n          transparent={isPreview}\n        />\n      </Box>\n      \n      {/* Water */}\n      <mesh ref={waterRef} position={[0, 0.15, 0]} receiveShadow>\n        <boxGeometry args={[0.9, 0.2, 0.3]} />\n        <meshStandardMaterial \n          color=\"#4682b4\"\n          transparent\n          opacity={isPreview ? 0.5 : 0.8}\n          roughness={0.1}\n          metalness={0.8}\n        />\n      </mesh>\n\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.15, 0]}>\n          <boxGeometry args={[1.2, 0.5, 0.6]} />\n          <meshBasicMaterial color=\"#00ffff\" transparent opacity={0.3} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Scarecrow - The decoy! Looks important but does nothing\nexport const ScarecrowComponent: React.FC<{\n  position: [number, number, number];\n  rotation?: number;\n  isPreview?: boolean;\n}> = ({ position, rotation = 0, isPreview = false }) => {\n  const [hovered, setHovered] = useState(false);\n  const scarecrowRef = useRef<THREE.Group>(null);\n  \n  // Dramatic wobble to make it seem important\n  useFrame((state) => {\n    if (scarecrowRef.current && !isPreview) {\n      scarecrowRef.current.rotation.y = Math.sin(state.clock.elapsedTime) * 0.1;\n    }\n  });\n  \n  return (\n    <group \n      ref={scarecrowRef}\n      position={position} \n      rotation={[0, rotation * Math.PI / 2, 0]}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      {/* Pole */}\n      <Cylinder args={[0.05, 0.05, 1.2]} position={[0, 0.6, 0]} castShadow>\n        <meshStandardMaterial color=\"#654321\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Cylinder>\n      \n      {/* Cross beam (arms) */}\n      <Box args={[0.8, 0.05, 0.05]} position={[0, 0.9, 0]} castShadow>\n        <meshStandardMaterial color=\"#654321\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n      \n      {/* Head */}\n      <Sphere args={[0.15, 8, 8]} position={[0, 1.1, 0]} castShadow>\n        <meshStandardMaterial color=\"#f4e04d\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Sphere>\n      \n      {/* Hat */}\n      <Cone args={[0.2, 0.2, 4]} position={[0, 1.25, 0]} castShadow>\n        <meshStandardMaterial color=\"#8b4513\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Cone>\n      \n      {/* \"Clothes\" */}\n      <Box args={[0.4, 0.3, 0.1]} position={[0, 0.7, 0]} castShadow>\n        <meshStandardMaterial color=\"#ff0000\" opacity={isPreview ? 0.7 : 1} transparent={isPreview} />\n      </Box>\n      \n      {/* Mysterious glow effect to make it seem important */}\n      {hovered && !isPreview && (\n        <mesh position={[0, 0.7, 0]}>\n          <sphereGeometry args={[0.8, 16, 16]} />\n          <meshBasicMaterial color=\"#ff00ff\" transparent opacity={0.2} />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\nexport default {\n  HouseComponent,\n  TreeComponent,\n  HayBaleComponent,\n  WaterTroughComponent,\n  ScarecrowComponent\n};","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { useGameStore } from '../../store/gameStore';\nimport FenceComponent from './objects/FenceComponent';\nimport CornerFenceComponent from './objects/CornerFenceComponent';\nimport GateComponent from './objects/GateComponent';\nimport { \n  HouseComponent, \n  TreeComponent, \n  HayBaleComponent, \n  WaterTroughComponent, \n  ScarecrowComponent \n} from './objects/BuildingObjects';\nimport { Sparkles } from '@react-three/drei';\n\nconst PlacementSystem: React.FC = () => {\n  const { camera, gl, scene } = useThree();\n  const { placedObjects, addObject, removeObject, currentDragItem, setCurrentDragItem } = useGameStore();\n  const [previewPosition, setPreviewPosition] = useState<[number, number, number]>([0, 0, 0]);\n  const [rotation, setRotation] = useState(0);\n  const [showSparkles, setShowSparkles] = useState(false);\n  const [sparklePosition, setSparklePosition] = useState<[number, number, number]>([0, 0, 0]);\n  const [deleteMode, setDeleteMode] = useState(false);\n  const [hoveredObjectId, setHoveredObjectId] = useState<string | null>(null);\n  const raycaster = useRef(new THREE.Raycaster());\n  const mouse = useRef(new THREE.Vector2());\n\n  // Snap to grid\n  const snapToGrid = (value: number): number => {\n    return Math.round(value);\n  };\n\n  // Check if fences connect\n  const checkFenceConnection = (pos: [number, number, number]): boolean => {\n    if (currentDragItem !== 'fence' && currentDragItem !== 'corner_fence' && currentDragItem !== 'gate') {\n      return false;\n    }\n    \n    return placedObjects.some(obj => {\n      if (obj.type === 'fence' || obj.type === 'corner_fence' || obj.type === 'gate') {\n        const dx = Math.abs(obj.position[0] - pos[0]);\n        const dz = Math.abs(obj.position[2] - pos[2]);\n        return (dx === 1 && dz === 0) || (dx === 0 && dz === 1);\n      }\n      return false;\n    });\n  };\n\n  // Handle mouse movement\n  const handleMouseMove = useCallback((event: MouseEvent) => {\n    if (!currentDragItem) return;\n\n    const rect = gl.domElement.getBoundingClientRect();\n    mouse.current.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n    mouse.current.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n    raycaster.current.setFromCamera(mouse.current, camera);\n    \n    // Only intersect with the ground plane\n    const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);\n    const intersection = new THREE.Vector3();\n    raycaster.current.ray.intersectPlane(plane, intersection);\n    \n    if (intersection) {\n      const snappedX = snapToGrid(intersection.x);\n      const snappedZ = snapToGrid(intersection.z);\n      setPreviewPosition([snappedX, 0, snappedZ]);\n    }\n  }, [currentDragItem, camera, gl]);\n\n  // Handle placement or deletion\n  const handleClick = useCallback((event: MouseEvent) => {\n    // Delete mode or shift-click\n    if (deleteMode || event.shiftKey) {\n      if (hoveredObjectId) {\n        removeObject(hoveredObjectId);\n        setHoveredObjectId(null);\n      }\n      return;\n    }\n\n    if (!currentDragItem) return;\n\n    const newObject = {\n      id: `${currentDragItem}-${Date.now()}`,\n      type: currentDragItem,\n      position: previewPosition,\n      rotation: [0, rotation, 0] as [number, number, number],\n    };\n\n    addObject(newObject);\n    \n    // Show sparkles for fence placement\n    if (currentDragItem === 'fence' || currentDragItem === 'corner_fence') {\n      setSparklePosition(previewPosition);\n      setShowSparkles(true);\n      setTimeout(() => setShowSparkles(false), 1000);\n      \n      // Play a \"click\" sound effect (in a real app)\n      // playSound('fence-click');\n    }\n  }, [currentDragItem, previewPosition, rotation, addObject, deleteMode, hoveredObjectId, removeObject]);\n\n  // Handle rotation and delete mode\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'r' || e.key === 'R') {\n        setRotation((prev) => (prev + 1) % 4);\n      } else if (e.key === 'd' || e.key === 'D') {\n        setDeleteMode((prev) => !prev);\n        setCurrentDragItem(null); // Clear placement mode when entering delete mode\n      } else if (e.key === 'Escape') {\n        setDeleteMode(false);\n        setCurrentDragItem(null);\n      }\n    };\n    \n    window.addEventListener('keypress', handleKeyPress);\n    return () => window.removeEventListener('keypress', handleKeyPress);\n  }, [setCurrentDragItem]);\n\n  // Mouse event listeners\n  useEffect(() => {\n    gl.domElement.addEventListener('mousemove', handleMouseMove);\n    gl.domElement.addEventListener('click', handleClick);\n    \n    return () => {\n      gl.domElement.removeEventListener('mousemove', handleMouseMove);\n      gl.domElement.removeEventListener('click', handleClick);\n    };\n  }, [gl, handleMouseMove, handleClick]);\n\n  // Render preview object\n  const renderPreviewObject = () => {\n    if (!currentDragItem) return null;\n\n    const isConnected = checkFenceConnection(previewPosition);\n    const props = {\n      position: previewPosition,\n      rotation,\n      isPreview: true,\n      isConnected,\n    };\n\n    switch (currentDragItem) {\n      case 'fence':\n        return <FenceComponent {...props} />;\n      case 'corner_fence':\n        return <CornerFenceComponent {...props} />;\n      case 'gate':\n        return <GateComponent {...props} />;\n      case 'house':\n        return <HouseComponent {...props} />;\n      case 'tree':\n        return <TreeComponent {...props} />;\n      case 'hay_bale':\n        return <HayBaleComponent {...props} />;\n      case 'water_trough':\n        return <WaterTroughComponent {...props} />;\n      case 'scarecrow':\n        return <ScarecrowComponent {...props} />;\n      default:\n        return null;\n    }\n  };\n\n  // Render placed objects\n  const renderPlacedObjects = () => {\n    return placedObjects.map((obj) => {\n      const isHovered = hoveredObjectId === obj.id;\n      \n      return (\n        <group \n          key={obj.id}\n          onPointerOver={() => deleteMode && setHoveredObjectId(obj.id)}\n          onPointerOut={() => setHoveredObjectId(null)}\n        >\n          {/* Delete mode highlight */}\n          {deleteMode && isHovered && (\n            <mesh position={obj.position}>\n              <boxGeometry args={[1.2, 1.2, 1.2]} />\n              <meshBasicMaterial color=\"#ff0000\" transparent opacity={0.3} />\n            </mesh>\n          )}\n          \n          {(() => {\n            const props = {\n              position: obj.position,\n              rotation: obj.rotation[1],\n              isPreview: false,\n            };\n\n            switch (obj.type) {\n              case 'fence':\n                return <FenceComponent {...props} isConnected={checkFenceConnection(obj.position)} />;\n              case 'corner_fence':\n                return <CornerFenceComponent {...props} />;\n              case 'gate':\n                return <GateComponent {...props} />;\n              case 'house':\n                return <HouseComponent {...props} />;\n              case 'tree':\n                return <TreeComponent {...props} />;\n              case 'hay_bale':\n                return <HayBaleComponent {...props} />;\n              case 'water_trough':\n                return <WaterTroughComponent {...props} />;\n              case 'scarecrow':\n                return <ScarecrowComponent {...props} />;\n              default:\n                return null;\n            }\n          })()}\n        </group>\n      );\n    });\n  };\n\n  return (\n    <>\n      {renderPreviewObject()}\n      {renderPlacedObjects()}\n      \n      {/* Sparkle effect for fence placement */}\n      {showSparkles && (\n        <Sparkles\n          position={sparklePosition}\n          count={30}\n          scale={2}\n          size={3}\n          speed={2}\n          color=\"#00ff88\"\n        />\n      )}\n      \n      {/* Grid helper visualization when placing */}\n      {currentDragItem && !deleteMode && (\n        <mesh position={previewPosition} rotation={[-Math.PI / 2, 0, 0]}>\n          <planeGeometry args={[1, 1]} />\n          <meshBasicMaterial \n            color=\"#00ff88\" \n            transparent \n            opacity={0.2} \n            side={THREE.DoubleSide}\n          />\n        </mesh>\n      )}\n      \n      {/* Delete mode indicator */}\n      {deleteMode && (\n        <mesh position={[0, 3, 0]}>\n          <boxGeometry args={[0.5, 0.5, 0.5]} />\n          <meshBasicMaterial color=\"#ff0000\" />\n        </mesh>\n      )}\n    </>\n  );\n};\n\nexport default PlacementSystem;","import React, { Suspense } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { \n  OrbitControls, \n  ContactShadows,\n  Loader,\n  PerspectiveCamera\n} from '@react-three/drei';\nimport * as THREE from 'three';\nimport GrassPlatform from './GrassPlatform';\nimport PlacementSystem from './PlacementSystem';\n\nconst Scene3D: React.FC = () => {\n  return (\n    <>\n      <div className=\"w-full h-full relative\">\n        <Canvas\n          shadows\n          dpr={[1, 2]}\n          gl={{ \n            antialias: true,\n            toneMapping: THREE.ACESFilmicToneMapping,\n            toneMappingExposure: 1.2,\n            alpha: false\n          }}\n          style={{ background: 'transparent' }}\n        >\n          <Suspense fallback={null}>\n            {/* Fixed isometric camera */}\n            <PerspectiveCamera \n              makeDefault \n              position={[8, 8, 8]}\n              fov={45}\n              near={0.1}\n              far={1000}\n            />\n            \n            {/* Disable orbit controls - fixed camera */}\n            <OrbitControls \n              enabled={false}\n              target={[0, 0, 0]}\n            />\n            \n            {/* Lighting setup - Enhanced for better visibility */}\n            <ambientLight intensity={0.6} />\n            \n            {/* Main sun light */}\n            <directionalLight\n              position={[10, 15, 10]}\n              intensity={1.2}\n              castShadow\n              shadow-mapSize={[2048, 2048]}\n              shadow-camera-near={0.5}\n              shadow-camera-far={50}\n              shadow-camera-left={-10}\n              shadow-camera-right={10}\n              shadow-camera-top={10}\n              shadow-camera-bottom={-10}\n              color=\"#ffffff\"\n            />\n            \n            {/* Fill light from opposite side */}\n            <directionalLight\n              position={[-5, 8, -5]}\n              intensity={0.4}\n              color=\"#87CEEB\"\n            />\n            \n            {/* Accent lights */}\n            <pointLight position={[0, 10, 0]} intensity={0.3} color=\"#ffffff\" />\n            <pointLight position={[-8, 3, -8]} intensity={0.3} color=\"#F59E0B\" />\n            <pointLight position={[8, 3, -8]} intensity={0.3} color=\"#10B981\" />\n            \n            {/* Simple gradient background using fog color */}\n            \n            {/* Grass platform */}\n            <GrassPlatform size={8} />\n            \n            {/* Placement system for objects */}\n            <PlacementSystem />\n            \n            {/* Contact shadows for better grounding */}\n            <ContactShadows\n              opacity={0.4}\n              scale={10}\n              blur={2}\n              far={4}\n              position={[0, 0, 0]}\n              color=\"#000000\"\n            />\n            \n            {/* Fog for depth - matches purple background */}\n            <fog attach=\"fog\" args={['#6B46C1', 15, 40]} />\n          </Suspense>\n        </Canvas>\n        <Loader />\n      </div>\n    </>\n  );\n};\n\nexport default Scene3D;"],"names":["initialState","placedObjects","currentDragItem","gamePhase","score","blocksPlaced","timeElapsed","useGameStore","create","set","_objectSpread","addObject","object","state","removeObject","id","filter","obj","Math","max","setCurrentDragItem","item","setGamePhase","phase","incrementScore","points","resetGame","updateTimeElapsed","time","_ref","size","_jsxs","children","rotation","PI","position","receiveShadow","_jsx","args","color","roughness","metalness","Grid","cellSize","cellThickness","cellColor","sectionSize","sectionThickness","sectionColor","fadeDistance","fadeStrength","followCamera","infiniteGrid","castShadow","isPreview","isConnected","onPlace","groupRef","useRef","hovered","setHovered","useState","glowRef","useFrame","current","material","opacity","sin","clock","elapsedTime","pickets","useMemo","picketPositions","i","push","ref","onPointerOver","onPointerOut","onClick","Box","transparent","map","x","side","THREE","concat","isOpen","setIsOpen","handleClick","HouseComponent","Cone","TreeComponent","_ref2","treeRef","z","Cylinder","Sphere","HayBaleComponent","_ref3","baleRef","scale","setScalar","WaterTroughComponent","_ref4","waterRef","y","ScarecrowComponent","_ref5","scarecrowRef","PlacementSystem","camera","gl","scene","useThree","previewPosition","setPreviewPosition","setRotation","showSparkles","setShowSparkles","sparklePosition","setSparklePosition","deleteMode","setDeleteMode","hoveredObjectId","setHoveredObjectId","raycaster","mouse","snapToGrid","value","round","checkFenceConnection","pos","some","type","dx","abs","dz","handleMouseMove","useCallback","event","rect","domElement","getBoundingClientRect","clientX","left","width","clientY","top","height","setFromCamera","plane","intersection","ray","intersectPlane","snappedX","snappedZ","shiftKey","newObject","Date","now","setTimeout","useEffect","handleKeyPress","e","key","prev","window","addEventListener","removeEventListener","_Fragment","renderPreviewObject","props","FenceComponent","CornerFenceComponent","GateComponent","isHovered","Sparkles","count","speed","Scene3D","className","Canvas","shadows","dpr","antialias","toneMapping","toneMappingExposure","alpha","style","background","Suspense","fallback","PerspectiveCamera","makeDefault","fov","near","far","OrbitControls","enabled","target","intensity","GrassPlatform","ContactShadows","blur","attach","Loader"],"sourceRoot":""}